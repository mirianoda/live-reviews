"use client";

import { useEffect, useState } from "react";
import { supabase } from "@/lib/supabase";

export default function ReviewsList({ venueId }: { venueId: string }) {
  const [reviews, setReviews] = useState([]);
  const [user, setUser] = useState(null);
  const [editReviewId, setEditReviewId] = useState(null);
  const [editData, setEditData] = useState({
    seat_number: "",
    artist: "",
    visibility: 0, v_comment: "",
    sound: 0, s_comment: "",
    facilities: 0, f_comment: "",
    access: 0, a_comment: "",
  });

  useEffect(() => {
    const fetchReviews = async () => {
      const { data } = await supabase.from("reviews").select("*").eq("venue_id", venueId);
      if (data) setReviews(data);
    };

    const fetchUser = async () => {
      const { data } = await supabase.auth.getUser();
      setUser(data.user);
    };

    fetchReviews();
    fetchUser();
  }, [venueId]);

  // üîπ Âè£„Ç≥„Éü„ÇíÂâäÈô§„Åô„Çã
  const handleDelete = async (id: string) => {
    const { error } = await supabase.from("reviews").delete().eq("id", id);
    if (error) {
      alert("ÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: " + error.message);
    } else {
      alert("Âè£„Ç≥„Éü„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü");
      setReviews(reviews.filter((review) => review.id !== id));
    }
  };

  // üîπ Âè£„Ç≥„Éü„ÅÆÁ∑®ÈõÜÈñãÂßã
  const handleEditStart = (review) => {
    setEditReviewId(review.id);
    setEditData({
      seat_number: review.seat_number,
      artist: review.artist,
      visibility: review.visibility,
      v_comment: review.v_comment,
      sound: review.sound,
      s_comment: review.s_comment,
      facilities: review.facilities,
      f_comment: review.f_comment,
      access: review.access,
      a_comment: review.a_comment,
    });
  };

  // üîπ Âè£„Ç≥„Éü„ÅÆÁ∑®ÈõÜ„Çí‰øùÂ≠ò
  const handleEditSave = async (id: string) => {
    const { error } = await supabase.from("reviews").update(editData).eq("id", id);
    if (error) {
      alert("Á∑®ÈõÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: " + error.message);
    } else {
      alert("Âè£„Ç≥„Éü„ÇíÁ∑®ÈõÜ„Åó„Åæ„Åó„Åü");
      setReviews(reviews.map((r) => (r.id === id ? { ...r, ...editData } : r)));
      setEditReviewId(null);
    }
  };

  return (
    <div className="mt-6 text-gray-700">
      <h2 className="text-xl  font-bold">Âè£„Ç≥„Éü‰∏ÄË¶ß</h2>
      {reviews.length === 0 ? (
        <p>„Åæ„Å†Âè£„Ç≥„Éü„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì</p>
      ) : (
        reviews.map((review) => (
          <div key={review.id} className="p-4 mt-2 rounded-md bg-white shadow-md">
            {editReviewId === review.id ? (
              <>
                <label className="block mt-2">
                  Â∫ßÂ∏≠Áï™Âè∑:
                  <input type="text" value={editData.seat_number} onChange={(e) => setEditData({ ...editData, seat_number: e.target.value })} className="border rounded w-full p-2 mt-1" />
                </label>

                <label className="block mt-2">
                  „Ç¢„Éº„ÉÜ„Ç£„Çπ„ÉàÂêç:
                  <input type="text" value={editData.artist} onChange={(e) => setEditData({ ...editData, artist: e.target.value })} className="border rounded w-full p-2 mt-1" />
                </label>

                <label className="block mt-2">
                  Ë¶ã„ÇÑ„Åô„ÅïÔºà0„Äú5Ôºâ:
                  <input type="number" min="0" max="5" value={editData.visibility} onChange={(e) => setEditData({ ...editData, visibility: Number(e.target.value) })} className="border rounded w-full p-2 mt-1" />
                </label>
                <label className="block mt-1">
                  „Ç≥„É°„É≥„Éà:
                  <textarea value={editData.v_comment} onChange={(e) => setEditData({ ...editData, v_comment: e.target.value })} className="border rounded w-full p-2 mt-1" />
                </label>

                <label className="block mt-2">
                  Èü≥ÈüøÔºà0„Äú5Ôºâ:
                  <input type="number" min="0" max="5" value={editData.sound} onChange={(e) => setEditData({ ...editData, sound: Number(e.target.value) })} className="border rounded w-full p-2 mt-1" />
                </label>
                <label className="block mt-1">
                  „Ç≥„É°„É≥„Éà:
                  <textarea value={editData.s_comment} onChange={(e) => setEditData({ ...editData, s_comment: e.target.value })} className="border rounded w-full p-2 mt-1" />
                </label>

                <label className="block mt-2">
                  Âë®Ëæ∫ÊñΩË®≠Ôºà0„Äú5Ôºâ:
                  <input type="number" min="0" max="5" value={editData.facilities} onChange={(e) => setEditData({ ...editData, facilities: Number(e.target.value) })} className="border rounded w-full p-2 mt-1" />
                </label>
                <label className="block mt-1">
                  „Ç≥„É°„É≥„Éà:
                  <textarea value={editData.f_comment} onChange={(e) => setEditData({ ...editData, f_comment: e.target.value })} className="border rounded w-full p-2 mt-1" />
                </label>

                <label className="block mt-2">
                  „Ç¢„ÇØ„Çª„ÇπÔºà0„Äú5Ôºâ:
                  <input type="number" min="0" max="5" value={editData.access} onChange={(e) => setEditData({ ...editData, access: Number(e.target.value) })} className="border rounded w-full p-2 mt-1" />
                </label>
                <label className="block mt-1">
                  „Ç≥„É°„É≥„Éà:
                  <textarea value={editData.a_comment} onChange={(e) => setEditData({ ...editData, a_comment: e.target.value })} className="border rounded w-full p-2 mt-1" />
                </label>

                <button onClick={() => handleEditSave(review.id)} className="bg-green-500 text-white p-1 rounded mt-2">
                  ‰øùÂ≠ò
                </button>
              </>
            ) : (
              <>
                <p>Â∫ßÂ∏≠: {review.seat_number} / „Ç¢„Éº„ÉÜ„Ç£„Çπ„Éà: {review.artist}</p>
                <p>Ë¶ã„ÇÑ„Åô„Åï: {review.visibility} / 5Ôºà{review.v_comment}Ôºâ</p>
                <p>Èü≥Èüø: {review.sound} / 5Ôºà{review.s_comment}Ôºâ</p>
                <p>Âë®Ëæ∫ÊñΩË®≠: {review.facilities} / 5Ôºà{review.f_comment}Ôºâ</p>
                <p>„Ç¢„ÇØ„Çª„Çπ: {review.access} / 5Ôºà{review.a_comment}Ôºâ</p>
              </>
            )}

            {user && user.id === review.user_id && (
              <div className="flex space-x-2 mt-2">
                <button onClick={() => handleEditStart(review)} className="bg-yellow-500 text-white p-1 rounded">
                  Á∑®ÈõÜ
                </button>
                <button onClick={() => handleDelete(review.id)} className="bg-red-500 text-white p-1 rounded">
                  ÂâäÈô§
                </button>
              </div>
            )}
          </div>
        ))
      )}
    </div>
  );
}
